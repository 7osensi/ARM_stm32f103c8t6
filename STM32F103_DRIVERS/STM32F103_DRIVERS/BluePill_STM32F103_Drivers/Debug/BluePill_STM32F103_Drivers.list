
BluePill_STM32F103_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000059c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006cc  080006d4  000106d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006cc  080006cc  000106d4  2**0
                  CONTENTS
  4 .ARM          00000000  080006cc  080006cc  000106d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006cc  080006d4  000106d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006cc  080006cc  000106cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006d0  080006d0  000106d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000106d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080006d4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080006d4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000106d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000bda  00000000  00000000  000106fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000446  00000000  00000000  000112d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000138  00000000  00000000  00011720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e0  00000000  00000000  00011858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000c70  00000000  00000000  00011938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d97  00000000  00000000  000125a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007c26  00000000  00000000  0001333f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001af65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000380  00000000  00000000  0001afb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080006b4 	.word	0x080006b4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080006b4 	.word	0x080006b4

08000170 <MCAL_AFIO_SelectPort>:
/*================================== #include ==================================*/
#include"Stm32F103_AFIO.h"

/* Function To Select Pin From Line Or Select Port From Line*/
void MCAL_AFIO_SelectPort(u8 u8LineNumber, u8 u8PortID)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	460a      	mov	r2, r1
 800017a:	71fb      	strb	r3, [r7, #7]
 800017c:	4613      	mov	r3, r2
 800017e:	71bb      	strb	r3, [r7, #6]
	if(u8LineNumber <= 3)
 8000180:	79fb      	ldrb	r3, [r7, #7]
 8000182:	2b03      	cmp	r3, #3
 8000184:	d817      	bhi.n	80001b6 <MCAL_AFIO_SelectPort+0x46>
	{
		/* Clear For Safety */
		MAFIO->EXTICR1 &= ~(0b1111 << (4 * u8LineNumber) );
 8000186:	4b24      	ldr	r3, [pc, #144]	; (8000218 <MCAL_AFIO_SelectPort+0xa8>)
 8000188:	689b      	ldr	r3, [r3, #8]
 800018a:	79fa      	ldrb	r2, [r7, #7]
 800018c:	0092      	lsls	r2, r2, #2
 800018e:	210f      	movs	r1, #15
 8000190:	fa01 f202 	lsl.w	r2, r1, r2
 8000194:	43d2      	mvns	r2, r2
 8000196:	4611      	mov	r1, r2
 8000198:	4a1f      	ldr	r2, [pc, #124]	; (8000218 <MCAL_AFIO_SelectPort+0xa8>)
 800019a:	400b      	ands	r3, r1
 800019c:	6093      	str	r3, [r2, #8]

		MAFIO->EXTICR1 |= (u8PortID << (4 * u8LineNumber) );
 800019e:	4b1e      	ldr	r3, [pc, #120]	; (8000218 <MCAL_AFIO_SelectPort+0xa8>)
 80001a0:	689b      	ldr	r3, [r3, #8]
 80001a2:	79b9      	ldrb	r1, [r7, #6]
 80001a4:	79fa      	ldrb	r2, [r7, #7]
 80001a6:	0092      	lsls	r2, r2, #2
 80001a8:	fa01 f202 	lsl.w	r2, r1, r2
 80001ac:	4611      	mov	r1, r2
 80001ae:	4a1a      	ldr	r2, [pc, #104]	; (8000218 <MCAL_AFIO_SelectPort+0xa8>)
 80001b0:	430b      	orrs	r3, r1
 80001b2:	6093      	str	r3, [r2, #8]
	}
	else
	{
		/* Do Nothing */
	}
}
 80001b4:	e02b      	b.n	800020e <MCAL_AFIO_SelectPort+0x9e>
	else if(u8LineNumber <= 7)
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	2b07      	cmp	r3, #7
 80001ba:	d80b      	bhi.n	80001d4 <MCAL_AFIO_SelectPort+0x64>
		MAFIO->EXTICR2 |= (u8PortID << (4 * u8LineNumber) );
 80001bc:	4b16      	ldr	r3, [pc, #88]	; (8000218 <MCAL_AFIO_SelectPort+0xa8>)
 80001be:	68db      	ldr	r3, [r3, #12]
 80001c0:	79b9      	ldrb	r1, [r7, #6]
 80001c2:	79fa      	ldrb	r2, [r7, #7]
 80001c4:	0092      	lsls	r2, r2, #2
 80001c6:	fa01 f202 	lsl.w	r2, r1, r2
 80001ca:	4611      	mov	r1, r2
 80001cc:	4a12      	ldr	r2, [pc, #72]	; (8000218 <MCAL_AFIO_SelectPort+0xa8>)
 80001ce:	430b      	orrs	r3, r1
 80001d0:	60d3      	str	r3, [r2, #12]
}
 80001d2:	e01c      	b.n	800020e <MCAL_AFIO_SelectPort+0x9e>
	else if(u8LineNumber <= 11)
 80001d4:	79fb      	ldrb	r3, [r7, #7]
 80001d6:	2b0b      	cmp	r3, #11
 80001d8:	d80b      	bhi.n	80001f2 <MCAL_AFIO_SelectPort+0x82>
		MAFIO->EXTICR3 |= (u8PortID << (4 * u8LineNumber) );
 80001da:	4b0f      	ldr	r3, [pc, #60]	; (8000218 <MCAL_AFIO_SelectPort+0xa8>)
 80001dc:	691b      	ldr	r3, [r3, #16]
 80001de:	79b9      	ldrb	r1, [r7, #6]
 80001e0:	79fa      	ldrb	r2, [r7, #7]
 80001e2:	0092      	lsls	r2, r2, #2
 80001e4:	fa01 f202 	lsl.w	r2, r1, r2
 80001e8:	4611      	mov	r1, r2
 80001ea:	4a0b      	ldr	r2, [pc, #44]	; (8000218 <MCAL_AFIO_SelectPort+0xa8>)
 80001ec:	430b      	orrs	r3, r1
 80001ee:	6113      	str	r3, [r2, #16]
}
 80001f0:	e00d      	b.n	800020e <MCAL_AFIO_SelectPort+0x9e>
	else if(u8LineNumber <= 15)
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	2b0f      	cmp	r3, #15
 80001f6:	d80a      	bhi.n	800020e <MCAL_AFIO_SelectPort+0x9e>
		MAFIO->EXTICR4 |= (u8PortID << (4 * u8LineNumber) );
 80001f8:	4b07      	ldr	r3, [pc, #28]	; (8000218 <MCAL_AFIO_SelectPort+0xa8>)
 80001fa:	695b      	ldr	r3, [r3, #20]
 80001fc:	79b9      	ldrb	r1, [r7, #6]
 80001fe:	79fa      	ldrb	r2, [r7, #7]
 8000200:	0092      	lsls	r2, r2, #2
 8000202:	fa01 f202 	lsl.w	r2, r1, r2
 8000206:	4611      	mov	r1, r2
 8000208:	4a03      	ldr	r2, [pc, #12]	; (8000218 <MCAL_AFIO_SelectPort+0xa8>)
 800020a:	430b      	orrs	r3, r1
 800020c:	6153      	str	r3, [r2, #20]
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	bc80      	pop	{r7}
 8000216:	4770      	bx	lr
 8000218:	40010000 	.word	0x40010000

0800021c <MCAL_EXTI_Enable>:
 *
 * @Note        - None
 *
 *****************************************************************/
void MCAL_EXTI_Enable(u8 u8LineNumber)
{
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	71fb      	strb	r3, [r7, #7]
	MEXTI->IMR |= (1 << u8LineNumber);
 8000226:	4b07      	ldr	r3, [pc, #28]	; (8000244 <MCAL_EXTI_Enable+0x28>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	79fa      	ldrb	r2, [r7, #7]
 800022c:	2101      	movs	r1, #1
 800022e:	fa01 f202 	lsl.w	r2, r1, r2
 8000232:	4611      	mov	r1, r2
 8000234:	4a03      	ldr	r2, [pc, #12]	; (8000244 <MCAL_EXTI_Enable+0x28>)
 8000236:	430b      	orrs	r3, r1
 8000238:	6013      	str	r3, [r2, #0]
}
 800023a:	bf00      	nop
 800023c:	370c      	adds	r7, #12
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr
 8000244:	40010400 	.word	0x40010400

08000248 <MCAL_EXTI_InterruptEdgeType>:
 *
 * @Note        - None
 *
 *****************************************************************/
void MCAL_EXTI_InterruptEdgeType(u8 u8LineNumber, u8 u8Edge)
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	460a      	mov	r2, r1
 8000252:	71fb      	strb	r3, [r7, #7]
 8000254:	4613      	mov	r3, r2
 8000256:	71bb      	strb	r3, [r7, #6]
	switch(u8Edge)
 8000258:	79bb      	ldrb	r3, [r7, #6]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d017      	beq.n	800028e <MCAL_EXTI_InterruptEdgeType+0x46>
 800025e:	2b01      	cmp	r3, #1
 8000260:	d12b      	bne.n	80002ba <MCAL_EXTI_InterruptEdgeType+0x72>
	{
	/* Rising Edge Trigger Selection */
	case EXTI_R_EDGE:
		MEXTI->RTSR |= (1 << u8LineNumber);
 8000262:	4b19      	ldr	r3, [pc, #100]	; (80002c8 <MCAL_EXTI_InterruptEdgeType+0x80>)
 8000264:	689b      	ldr	r3, [r3, #8]
 8000266:	79fa      	ldrb	r2, [r7, #7]
 8000268:	2101      	movs	r1, #1
 800026a:	fa01 f202 	lsl.w	r2, r1, r2
 800026e:	4611      	mov	r1, r2
 8000270:	4a15      	ldr	r2, [pc, #84]	; (80002c8 <MCAL_EXTI_InterruptEdgeType+0x80>)
 8000272:	430b      	orrs	r3, r1
 8000274:	6093      	str	r3, [r2, #8]
		/* Clear The FTSR Corresponding Pin */
		MEXTI->FTSR &= ~(1 << u8LineNumber);		break;
 8000276:	4b14      	ldr	r3, [pc, #80]	; (80002c8 <MCAL_EXTI_InterruptEdgeType+0x80>)
 8000278:	68db      	ldr	r3, [r3, #12]
 800027a:	79fa      	ldrb	r2, [r7, #7]
 800027c:	2101      	movs	r1, #1
 800027e:	fa01 f202 	lsl.w	r2, r1, r2
 8000282:	43d2      	mvns	r2, r2
 8000284:	4611      	mov	r1, r2
 8000286:	4a10      	ldr	r2, [pc, #64]	; (80002c8 <MCAL_EXTI_InterruptEdgeType+0x80>)
 8000288:	400b      	ands	r3, r1
 800028a:	60d3      	str	r3, [r2, #12]
 800028c:	e016      	b.n	80002bc <MCAL_EXTI_InterruptEdgeType+0x74>
	/* Falling Edge Trigger Selection */
	case EXTI_F_EDGE:
		MEXTI->FTSR |= (1 << u8LineNumber);
 800028e:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <MCAL_EXTI_InterruptEdgeType+0x80>)
 8000290:	68db      	ldr	r3, [r3, #12]
 8000292:	79fa      	ldrb	r2, [r7, #7]
 8000294:	2101      	movs	r1, #1
 8000296:	fa01 f202 	lsl.w	r2, r1, r2
 800029a:	4611      	mov	r1, r2
 800029c:	4a0a      	ldr	r2, [pc, #40]	; (80002c8 <MCAL_EXTI_InterruptEdgeType+0x80>)
 800029e:	430b      	orrs	r3, r1
 80002a0:	60d3      	str	r3, [r2, #12]
		/* Clear The RTSR Corresponding Pin */
		MEXTI->RTSR &= ~(1 << u8LineNumber);		break;
 80002a2:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <MCAL_EXTI_InterruptEdgeType+0x80>)
 80002a4:	689b      	ldr	r3, [r3, #8]
 80002a6:	79fa      	ldrb	r2, [r7, #7]
 80002a8:	2101      	movs	r1, #1
 80002aa:	fa01 f202 	lsl.w	r2, r1, r2
 80002ae:	43d2      	mvns	r2, r2
 80002b0:	4611      	mov	r1, r2
 80002b2:	4a05      	ldr	r2, [pc, #20]	; (80002c8 <MCAL_EXTI_InterruptEdgeType+0x80>)
 80002b4:	400b      	ands	r3, r1
 80002b6:	6093      	str	r3, [r2, #8]
 80002b8:	e000      	b.n	80002bc <MCAL_EXTI_InterruptEdgeType+0x74>
	default:										break;
 80002ba:	bf00      	nop
	}
}
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	40010400 	.word	0x40010400

080002cc <MCAL_EXTI_ClearPending>:
 *
 * @Note        - None
 *
 *****************************************************************/
void MCAL_EXTI_ClearPending(u8 u8PinNumber)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	71fb      	strb	r3, [r7, #7]
	/* Clear Pending Register Bit */
	if(MEXTI->PR & (1 << u8PinNumber) )
 80002d6:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <MCAL_EXTI_ClearPending+0x3c>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	79fa      	ldrb	r2, [r7, #7]
 80002dc:	2101      	movs	r1, #1
 80002de:	fa01 f202 	lsl.w	r2, r1, r2
 80002e2:	4013      	ands	r3, r2
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d009      	beq.n	80002fc <MCAL_EXTI_ClearPending+0x30>
	{
		MEXTI->PR |= (1 << u8PinNumber);
 80002e8:	4b07      	ldr	r3, [pc, #28]	; (8000308 <MCAL_EXTI_ClearPending+0x3c>)
 80002ea:	695b      	ldr	r3, [r3, #20]
 80002ec:	79fa      	ldrb	r2, [r7, #7]
 80002ee:	2101      	movs	r1, #1
 80002f0:	fa01 f202 	lsl.w	r2, r1, r2
 80002f4:	4611      	mov	r1, r2
 80002f6:	4a04      	ldr	r2, [pc, #16]	; (8000308 <MCAL_EXTI_ClearPending+0x3c>)
 80002f8:	430b      	orrs	r3, r1
 80002fa:	6153      	str	r3, [r2, #20]
	}
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40010400 	.word	0x40010400

0800030c <MCAL_GPIO_PeripheralClkControl>:
 *****************************************************************/

/*================================= FUNC_START ================================*/

void MCAL_GPIO_PeripheralClkControl(GPIOx_t *pGPIOx, u8 EN_DIS)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	460b      	mov	r3, r1
 8000316:	70fb      	strb	r3, [r7, #3]
	if(EN_DIS == ENABLE)
 8000318:	78fb      	ldrb	r3, [r7, #3]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d120      	bne.n	8000360 <MCAL_GPIO_PeripheralClkControl+0x54>
	{
		if(pGPIOx == MGPIOA)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a22      	ldr	r2, [pc, #136]	; (80003ac <MCAL_GPIO_PeripheralClkControl+0xa0>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d106      	bne.n	8000334 <MCAL_GPIO_PeripheralClkControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000326:	4b22      	ldr	r3, [pc, #136]	; (80003b0 <MCAL_GPIO_PeripheralClkControl+0xa4>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	4a21      	ldr	r2, [pc, #132]	; (80003b0 <MCAL_GPIO_PeripheralClkControl+0xa4>)
 800032c:	f043 0304 	orr.w	r3, r3, #4
 8000330:	6193      	str	r3, [r2, #24]
		else if (pGPIOx == MGPIOC)
		{
			GPIOC_PCLK_DIS();
		}
	}
}
 8000332:	e035      	b.n	80003a0 <MCAL_GPIO_PeripheralClkControl+0x94>
		else if (pGPIOx == MGPIOB)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a1f      	ldr	r2, [pc, #124]	; (80003b4 <MCAL_GPIO_PeripheralClkControl+0xa8>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d106      	bne.n	800034a <MCAL_GPIO_PeripheralClkControl+0x3e>
			GPIOB_PCLK_EN();
 800033c:	4b1c      	ldr	r3, [pc, #112]	; (80003b0 <MCAL_GPIO_PeripheralClkControl+0xa4>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a1b      	ldr	r2, [pc, #108]	; (80003b0 <MCAL_GPIO_PeripheralClkControl+0xa4>)
 8000342:	f043 0308 	orr.w	r3, r3, #8
 8000346:	6193      	str	r3, [r2, #24]
}
 8000348:	e02a      	b.n	80003a0 <MCAL_GPIO_PeripheralClkControl+0x94>
		else if (pGPIOx == MGPIOC)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4a1a      	ldr	r2, [pc, #104]	; (80003b8 <MCAL_GPIO_PeripheralClkControl+0xac>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d126      	bne.n	80003a0 <MCAL_GPIO_PeripheralClkControl+0x94>
			GPIOC_PCLK_EN();
 8000352:	4b17      	ldr	r3, [pc, #92]	; (80003b0 <MCAL_GPIO_PeripheralClkControl+0xa4>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	4a16      	ldr	r2, [pc, #88]	; (80003b0 <MCAL_GPIO_PeripheralClkControl+0xa4>)
 8000358:	f043 0310 	orr.w	r3, r3, #16
 800035c:	6193      	str	r3, [r2, #24]
}
 800035e:	e01f      	b.n	80003a0 <MCAL_GPIO_PeripheralClkControl+0x94>
		if(pGPIOx == MGPIOA)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a12      	ldr	r2, [pc, #72]	; (80003ac <MCAL_GPIO_PeripheralClkControl+0xa0>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d106      	bne.n	8000376 <MCAL_GPIO_PeripheralClkControl+0x6a>
			GPIOA_PCLK_DIS();
 8000368:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <MCAL_GPIO_PeripheralClkControl+0xa4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	4a10      	ldr	r2, [pc, #64]	; (80003b0 <MCAL_GPIO_PeripheralClkControl+0xa4>)
 800036e:	f043 0304 	orr.w	r3, r3, #4
 8000372:	60d3      	str	r3, [r2, #12]
}
 8000374:	e014      	b.n	80003a0 <MCAL_GPIO_PeripheralClkControl+0x94>
		else if (pGPIOx == MGPIOB)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a0e      	ldr	r2, [pc, #56]	; (80003b4 <MCAL_GPIO_PeripheralClkControl+0xa8>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d106      	bne.n	800038c <MCAL_GPIO_PeripheralClkControl+0x80>
			GPIOB_PCLK_DIS();
 800037e:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <MCAL_GPIO_PeripheralClkControl+0xa4>)
 8000380:	68db      	ldr	r3, [r3, #12]
 8000382:	4a0b      	ldr	r2, [pc, #44]	; (80003b0 <MCAL_GPIO_PeripheralClkControl+0xa4>)
 8000384:	f043 0308 	orr.w	r3, r3, #8
 8000388:	60d3      	str	r3, [r2, #12]
}
 800038a:	e009      	b.n	80003a0 <MCAL_GPIO_PeripheralClkControl+0x94>
		else if (pGPIOx == MGPIOC)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4a0a      	ldr	r2, [pc, #40]	; (80003b8 <MCAL_GPIO_PeripheralClkControl+0xac>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d105      	bne.n	80003a0 <MCAL_GPIO_PeripheralClkControl+0x94>
			GPIOC_PCLK_DIS();
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <MCAL_GPIO_PeripheralClkControl+0xa4>)
 8000396:	68db      	ldr	r3, [r3, #12]
 8000398:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <MCAL_GPIO_PeripheralClkControl+0xa4>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	60d3      	str	r3, [r2, #12]
}
 80003a0:	bf00      	nop
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40010800 	.word	0x40010800
 80003b0:	40021000 	.word	0x40021000
 80003b4:	40010c00 	.word	0x40010c00
 80003b8:	40011000 	.word	0x40011000

080003bc <MCAL_GPIO_Init>:
 *****************************************************************/

/*================================= FUNC_START ================================*/

void MCAL_GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]

	u32 TempReg = 0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	60fb      	str	r3, [r7, #12]

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 7) /* CRL : CR[0] : Pins 0 : 7 */
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	791b      	ldrb	r3, [r3, #4]
 80003cc:	2b07      	cmp	r3, #7
 80003ce:	d846      	bhi.n	800045e <MCAL_GPIO_Init+0xa2>
	{
		/* 1. Configure The Mode of The GPIO Pin */

		TempReg = ( (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) << ( (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ) ) );
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	795b      	ldrb	r3, [r3, #5]
 80003d4:	461a      	mov	r2, r3
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	791b      	ldrb	r3, [r3, #4]
 80003da:	009b      	lsls	r3, r3, #2
 80003dc:	fa02 f303 	lsl.w	r3, r2, r3
 80003e0:	60fb      	str	r3, [r7, #12]

		pGPIOHandle->pGPIOx->CR[0]  &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); /* Clearing Pins */
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	791b      	ldrb	r3, [r3, #4]
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	2103      	movs	r1, #3
 80003f0:	fa01 f303 	lsl.w	r3, r1, r3
 80003f4:	43db      	mvns	r3, r3
 80003f6:	4619      	mov	r1, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	400a      	ands	r2, r1
 80003fe:	601a      	str	r2, [r3, #0]


		pGPIOHandle->pGPIOx->CR[0] |= TempReg;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	6819      	ldr	r1, [r3, #0]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	68fa      	ldr	r2, [r7, #12]
 800040c:	430a      	orrs	r2, r1
 800040e:	601a      	str	r2, [r3, #0]

		TempReg = 0;
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]

		/* 2. Configure The Configuration of The GPIO Pin */

		TempReg = ( (pGPIOHandle->GPIO_PinConfig.GPIO_PinConfiguration) << ( (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ) + 2) );
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	799b      	ldrb	r3, [r3, #6]
 8000418:	461a      	mov	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	791b      	ldrb	r3, [r3, #4]
 800041e:	009b      	lsls	r3, r3, #2
 8000420:	3302      	adds	r3, #2
 8000422:	fa02 f303 	lsl.w	r3, r2, r3
 8000426:	60fb      	str	r3, [r7, #12]

		pGPIOHandle->pGPIOx->CR[0]  &= ~(0x3 << ( (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) + 2) ); /* Clearing Pins */
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	791b      	ldrb	r3, [r3, #4]
 8000432:	009b      	lsls	r3, r3, #2
 8000434:	3302      	adds	r3, #2
 8000436:	2103      	movs	r1, #3
 8000438:	fa01 f303 	lsl.w	r3, r1, r3
 800043c:	43db      	mvns	r3, r3
 800043e:	4619      	mov	r1, r3
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	400a      	ands	r2, r1
 8000446:	601a      	str	r2, [r3, #0]

		pGPIOHandle->pGPIOx->CR[0] |= TempReg;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	6819      	ldr	r1, [r3, #0]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	68fa      	ldr	r2, [r7, #12]
 8000454:	430a      	orrs	r2, r1
 8000456:	601a      	str	r2, [r3, #0]

		TempReg = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]

		pGPIOHandle->pGPIOx->CR[1] |= TempReg;

		TempReg = 0;
	}
}
 800045c:	e04b      	b.n	80004f6 <MCAL_GPIO_Init+0x13a>
	else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber >= 8) /* CRH : CR[1] : Pins 8 : 15 */
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	791b      	ldrb	r3, [r3, #4]
 8000462:	2b07      	cmp	r3, #7
 8000464:	d947      	bls.n	80004f6 <MCAL_GPIO_Init+0x13a>
		TempReg = ( (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) << ( (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) - 32) ) );
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	795b      	ldrb	r3, [r3, #5]
 800046a:	461a      	mov	r2, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	791b      	ldrb	r3, [r3, #4]
 8000470:	3b08      	subs	r3, #8
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	fa02 f303 	lsl.w	r3, r2, r3
 8000478:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CR[1]  &= ~(0x3 << ( (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) - 32) ); /* Clearing Pins */
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	685a      	ldr	r2, [r3, #4]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	791b      	ldrb	r3, [r3, #4]
 8000484:	3b08      	subs	r3, #8
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	2103      	movs	r1, #3
 800048a:	fa01 f303 	lsl.w	r3, r1, r3
 800048e:	43db      	mvns	r3, r3
 8000490:	4619      	mov	r1, r3
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	400a      	ands	r2, r1
 8000498:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CR[1] |= TempReg;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	6859      	ldr	r1, [r3, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	68fa      	ldr	r2, [r7, #12]
 80004a6:	430a      	orrs	r2, r1
 80004a8:	605a      	str	r2, [r3, #4]
		TempReg = 0;
 80004aa:	2300      	movs	r3, #0
 80004ac:	60fb      	str	r3, [r7, #12]
		TempReg = ( (pGPIOHandle->GPIO_PinConfig.GPIO_PinConfiguration) << ( ( (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ) + 2) - 32) );
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	799b      	ldrb	r3, [r3, #6]
 80004b2:	461a      	mov	r2, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	791b      	ldrb	r3, [r3, #4]
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	3b1e      	subs	r3, #30
 80004bc:	fa02 f303 	lsl.w	r3, r2, r3
 80004c0:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CR[1]  &= ~(0x3 << ( ( (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) + 2) - 32) ); /* Clearing Pins */
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	685a      	ldr	r2, [r3, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	791b      	ldrb	r3, [r3, #4]
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	3b1e      	subs	r3, #30
 80004d0:	2103      	movs	r1, #3
 80004d2:	fa01 f303 	lsl.w	r3, r1, r3
 80004d6:	43db      	mvns	r3, r3
 80004d8:	4619      	mov	r1, r3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	400a      	ands	r2, r1
 80004e0:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CR[1] |= TempReg;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	6859      	ldr	r1, [r3, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	68fa      	ldr	r2, [r7, #12]
 80004ee:	430a      	orrs	r2, r1
 80004f0:	605a      	str	r2, [r3, #4]
		TempReg = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]
}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr

08000500 <MCAL_GPIO_ToggleOutputPin>:
 *****************************************************************/

/*================================= FUNC_START ================================*/

void MCAL_GPIO_ToggleOutputPin(GPIOx_t *pGPIOx, u8 u8PinNumber)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	460b      	mov	r3, r1
 800050a:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << u8PinNumber);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	78fa      	ldrb	r2, [r7, #3]
 8000512:	2101      	movs	r1, #1
 8000514:	fa01 f202 	lsl.w	r2, r1, r2
 8000518:	405a      	eors	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	60da      	str	r2, [r3, #12]
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr

08000528 <MCAL_NVIC_EnableInterrupt>:
 *
 * @Note        - None
 *
 *****************************************************************/
void MCAL_NVIC_EnableInterrupt(u8 IRQNumber)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
	NVIC_ISER0 |= (1 << IRQNumber); /* EXTI Line0 Interrupt is in Position 6 in IVT */
 8000532:	4b07      	ldr	r3, [pc, #28]	; (8000550 <MCAL_NVIC_EnableInterrupt+0x28>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	79fa      	ldrb	r2, [r7, #7]
 8000538:	2101      	movs	r1, #1
 800053a:	fa01 f202 	lsl.w	r2, r1, r2
 800053e:	4611      	mov	r1, r2
 8000540:	4a03      	ldr	r2, [pc, #12]	; (8000550 <MCAL_NVIC_EnableInterrupt+0x28>)
 8000542:	430b      	orrs	r3, r1
 8000544:	6013      	str	r3, [r2, #0]
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	e000e100 	.word	0xe000e100

08000554 <main>:
void delay()
{
	for(u32 i = 0; i < 500000 / 2; i++);
}
int main()
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
	/* Clock Enable */
	/*===============================================================================*/
	/* GPIOA Clock Enable */
	MCAL_GPIO_PeripheralClkControl(MGPIOA, ENABLE);
 800055a:	2101      	movs	r1, #1
 800055c:	4820      	ldr	r0, [pc, #128]	; (80005e0 <main+0x8c>)
 800055e:	f7ff fed5 	bl	800030c <MCAL_GPIO_PeripheralClkControl>
	/* GPIOB Clock Enable */
	MCAL_GPIO_PeripheralClkControl(MGPIOB, ENABLE);
 8000562:	2101      	movs	r1, #1
 8000564:	481f      	ldr	r0, [pc, #124]	; (80005e4 <main+0x90>)
 8000566:	f7ff fed1 	bl	800030c <MCAL_GPIO_PeripheralClkControl>

	/* AFIO Clock Enable */
	AFIO_PCLK_EN();
 800056a:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <main+0x94>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	4a1e      	ldr	r2, [pc, #120]	; (80005e8 <main+0x94>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6193      	str	r3, [r2, #24]
	/*===============================================================================*/

	/* LED Configuration */
	GPIO_Handle_t GPIO_LED;

	memset(&GPIO_LED, 0, sizeof(GPIO_LED) ); /* Set All Structure Members to 0 */
 8000576:	f107 0308 	add.w	r3, r7, #8
 800057a:	2208      	movs	r2, #8
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f000 f890 	bl	80006a4 <memset>

	GPIO_LED.pGPIOx = MGPIOA;
 8000584:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <main+0x8c>)
 8000586:	60bb      	str	r3, [r7, #8]
	GPIO_LED.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_1;
 8000588:	2301      	movs	r3, #1
 800058a:	733b      	strb	r3, [r7, #12]
	GPIO_LED.GPIO_PinConfig.GPIO_PinMode = OUTPUT_10MHZ_MODE;
 800058c:	2301      	movs	r3, #1
 800058e:	737b      	strb	r3, [r7, #13]
	GPIO_LED.GPIO_PinConfig.GPIO_PinConfiguration = GP_OUTPUT_PU_PL_MODE;
 8000590:	2300      	movs	r3, #0
 8000592:	73bb      	strb	r3, [r7, #14]
	MCAL_GPIO_Init(&GPIO_LED);
 8000594:	f107 0308 	add.w	r3, r7, #8
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff ff0f 	bl	80003bc <MCAL_GPIO_Init>
	/*===============================================================================*/

	/* BTN Configuration */
	GPIO_Handle_t GPIO_BTN;

	memset(&GPIO_BTN, 0, sizeof(GPIO_BTN) ); /* Set All Structure Members to 0 */
 800059e:	463b      	mov	r3, r7
 80005a0:	2208      	movs	r2, #8
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 f87d 	bl	80006a4 <memset>

	GPIO_BTN.pGPIOx = MGPIOB;
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <main+0x90>)
 80005ac:	603b      	str	r3, [r7, #0]
	GPIO_BTN.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	713b      	strb	r3, [r7, #4]
	GPIO_BTN.GPIO_PinConfig.GPIO_PinMode = INPUT_MODE;
 80005b2:	2300      	movs	r3, #0
 80005b4:	717b      	strb	r3, [r7, #5]
	GPIO_BTN.GPIO_PinConfig.GPIO_PinConfiguration = RESET_MODE;
 80005b6:	2301      	movs	r3, #1
 80005b8:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(&GPIO_BTN);
 80005ba:	463b      	mov	r3, r7
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fefd 	bl	80003bc <MCAL_GPIO_Init>

	/*===============================================================================*/

	/* Configure the Mask Bits of The 20 Interrupt Lines (EXTI_IMR) */
	MCAL_EXTI_Enable(GPIO_PIN_NO_0);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f7ff fe2a 	bl	800021c <MCAL_EXTI_Enable>

	MCAL_EXTI_InterruptEdgeType(GPIO_PIN_NO_0, EXTI_F_EDGE);
 80005c8:	2100      	movs	r1, #0
 80005ca:	2000      	movs	r0, #0
 80005cc:	f7ff fe3c 	bl	8000248 <MCAL_EXTI_InterruptEdgeType>

	/* Select The Port [PA, PB, PC] */
	MCAL_AFIO_SelectPort(GPIO_PIN_NO_0, GPIOB_PORT);
 80005d0:	2101      	movs	r1, #1
 80005d2:	2000      	movs	r0, #0
 80005d4:	f7ff fdcc 	bl	8000170 <MCAL_AFIO_SelectPort>

	/* Enable IRQ Number */
	MCAL_NVIC_EnableInterrupt(IRQ_NO_EXTI0);
 80005d8:	2006      	movs	r0, #6
 80005da:	f7ff ffa5 	bl	8000528 <MCAL_NVIC_EnableInterrupt>

	while(1);
 80005de:	e7fe      	b.n	80005de <main+0x8a>
 80005e0:	40010800 	.word	0x40010800
 80005e4:	40010c00 	.word	0x40010c00
 80005e8:	40021000 	.word	0x40021000

080005ec <EXTI0_IRQHandler>:
	return 0;
}

void EXTI0_IRQHandler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	/* Handle The Interrupt */
	MCAL_EXTI_ClearPending(GPIO_PIN_NO_0); /* Pin 0 */
 80005f0:	2000      	movs	r0, #0
 80005f2:	f7ff fe6b 	bl	80002cc <MCAL_EXTI_ClearPending>
	MCAL_GPIO_ToggleOutputPin(MGPIOA, GPIO_PIN_NO_1);
 80005f6:	2101      	movs	r1, #1
 80005f8:	4802      	ldr	r0, [pc, #8]	; (8000604 <EXTI0_IRQHandler+0x18>)
 80005fa:	f7ff ff81 	bl	8000500 <MCAL_GPIO_ToggleOutputPin>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40010800 	.word	0x40010800

08000608 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800060a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800060c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000610:	480c      	ldr	r0, [pc, #48]	; (8000644 <LoopForever+0x6>)
  ldr r1, =_edata
 8000612:	490d      	ldr	r1, [pc, #52]	; (8000648 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000614:	4a0d      	ldr	r2, [pc, #52]	; (800064c <LoopForever+0xe>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000618:	e002      	b.n	8000620 <LoopCopyDataInit>

0800061a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800061c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061e:	3304      	adds	r3, #4

08000620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000624:	d3f9      	bcc.n	800061a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000626:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000628:	4c0a      	ldr	r4, [pc, #40]	; (8000654 <LoopForever+0x16>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800062c:	e001      	b.n	8000632 <LoopFillZerobss>

0800062e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000630:	3204      	adds	r2, #4

08000632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000634:	d3fb      	bcc.n	800062e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000636:	f000 f811 	bl	800065c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063a:	f7ff ff8b 	bl	8000554 <main>

0800063e <LoopForever>:

LoopForever:
  b LoopForever
 800063e:	e7fe      	b.n	800063e <LoopForever>
  ldr   r0, =_estack
 8000640:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000648:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800064c:	080006d4 	.word	0x080006d4
  ldr r2, =_sbss
 8000650:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000654:	2000001c 	.word	0x2000001c

08000658 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000658:	e7fe      	b.n	8000658 <ADC1_2_IRQHandler>
	...

0800065c <__libc_init_array>:
 800065c:	b570      	push	{r4, r5, r6, lr}
 800065e:	2600      	movs	r6, #0
 8000660:	4d0c      	ldr	r5, [pc, #48]	; (8000694 <__libc_init_array+0x38>)
 8000662:	4c0d      	ldr	r4, [pc, #52]	; (8000698 <__libc_init_array+0x3c>)
 8000664:	1b64      	subs	r4, r4, r5
 8000666:	10a4      	asrs	r4, r4, #2
 8000668:	42a6      	cmp	r6, r4
 800066a:	d109      	bne.n	8000680 <__libc_init_array+0x24>
 800066c:	f000 f822 	bl	80006b4 <_init>
 8000670:	2600      	movs	r6, #0
 8000672:	4d0a      	ldr	r5, [pc, #40]	; (800069c <__libc_init_array+0x40>)
 8000674:	4c0a      	ldr	r4, [pc, #40]	; (80006a0 <__libc_init_array+0x44>)
 8000676:	1b64      	subs	r4, r4, r5
 8000678:	10a4      	asrs	r4, r4, #2
 800067a:	42a6      	cmp	r6, r4
 800067c:	d105      	bne.n	800068a <__libc_init_array+0x2e>
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f855 3b04 	ldr.w	r3, [r5], #4
 8000684:	4798      	blx	r3
 8000686:	3601      	adds	r6, #1
 8000688:	e7ee      	b.n	8000668 <__libc_init_array+0xc>
 800068a:	f855 3b04 	ldr.w	r3, [r5], #4
 800068e:	4798      	blx	r3
 8000690:	3601      	adds	r6, #1
 8000692:	e7f2      	b.n	800067a <__libc_init_array+0x1e>
 8000694:	080006cc 	.word	0x080006cc
 8000698:	080006cc 	.word	0x080006cc
 800069c:	080006cc 	.word	0x080006cc
 80006a0:	080006d0 	.word	0x080006d0

080006a4 <memset>:
 80006a4:	4603      	mov	r3, r0
 80006a6:	4402      	add	r2, r0
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d100      	bne.n	80006ae <memset+0xa>
 80006ac:	4770      	bx	lr
 80006ae:	f803 1b01 	strb.w	r1, [r3], #1
 80006b2:	e7f9      	b.n	80006a8 <memset+0x4>

080006b4 <_init>:
 80006b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006b6:	bf00      	nop
 80006b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ba:	bc08      	pop	{r3}
 80006bc:	469e      	mov	lr, r3
 80006be:	4770      	bx	lr

080006c0 <_fini>:
 80006c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c2:	bf00      	nop
 80006c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006c6:	bc08      	pop	{r3}
 80006c8:	469e      	mov	lr, r3
 80006ca:	4770      	bx	lr
